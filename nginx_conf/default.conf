server {
	listen 80 default_server;
	listen [::]:80 default_server;
	server_name localhost;
	return 301 https://$host$request_uri;
}

server {
    # listen       80;
    listen              443 ssl;
    ssl_certificate     /run/secrets/ssl_cert;
    ssl_certificate_key /run/secrets/ssl_key;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    server_name  localhost;

    proxy_cache_bypass  $http_upgrade;
    proxy_set_header Upgrade           $http_upgrade;
    proxy_set_header Connection        "upgrade";
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host  $host;
    proxy_set_header X-Forwarded-Port  $server_port;

    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    #Simple proxy pass
    location /hello {
      proxy_pass      http://flaskapp:5000/hello;
    }
    #session_contents = {id_token=true}
    access_by_lua '
         local opts = {
           redirect_uri_path = "/redirect_uri",
           accept_none_alg = true,
           discovery = "http://172.17.0.1:8080/auth/realms/myrealm/.well-known/openid-configuration",
           client_id = "openresty",
           client_secret = "401a8b85-3850-4e93-8326-b1ae945cedc5",
           redirect_uri_scheme = "https",
           logout_path = "/logout",
           redirect_after_logout_uri = "http://172.17.0.1:8080/auth/realms/myrealm/protocol/openid-connect/logout?redirect_uri=http://localhost/",
           redirect_after_logout_with_id_token_hint = false,
           scope = "openid"
         }
         -- call introspect for OAuth 2.0 Bearer Access Token validation
         local res, err = require("resty.openidc").authenticate(opts)
         if err then
           ngx.status = 403
           ngx.say(err)
           ngx.exit(ngx.HTTP_FORBIDDEN)
         end
         ngx.req.set_header("Authorization", "Bearer " .. tostring(res.access_token))
      ';
 
      # I disabled caching so the browser won't cache the site.
      expires           0;
      add_header        Cache-Control private;


}

